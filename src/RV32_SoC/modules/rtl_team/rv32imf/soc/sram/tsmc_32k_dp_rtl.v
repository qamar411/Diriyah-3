//---------------------------------------------------------------------
//               Copyright(c) Synopsys, Inc.                           
//     All Rights reserved - Unpublished -rights reserved under        
//     the Copyright laws of the United States of America.             
//                                                                     
//  U.S. Patents: 7,093,156 B1 and 7,406,620 B2 (and more pending).    
//                                                                     
//  This file includes the Confidential information of Synopsys, Inc.  
//  and TSMC.                                                          
//  The receiver of this Confidential Information shall not disclose   
//  it to any third party and shall protect its confidentiality by     
//  using the same degree of care, but not less than a reasonable      
//  degree of care, as the receiver uses to protect receiver's own     
//  Confidential Information.                                          
//  Licensee acknowledges and agrees that all output generated for     
//  Licensee by Synopsys, Inc. as described in the pertinent Program   
//  Schedule(s), or generated by Licensee through use of any Compiler  
//  licensed hereunder contains information that complies with the     
//  Virtual Component Identification Physical Tagging Standard (VCID)  
//  as maintained by the Virtual Socket Interface Alliance (VSIA).     
//  Such information may be expressed in GDSII Layer 63 or other such  
//  layer designated by the VSIA, hardware definition languages, or    
//  other formats.  Licensee is not authorized to alter or change any  
//  such information.                                                  
//---------------------------------------------------------------------
//                                                                     
//  Built for linux64 and running on linux64.                          
//                                                                     
//  Software           : Rev: W-2025.03                                
//  Library Format     : Rev: 1.05.00                                  
//  Compiler Name      : ts18s2p22hssb02p5                             
//  Platform           : Linux3.10.0-1160.119.1.el7.x86_64             
//                     : #1 SMP Tue Jun 4 14:43:51 UTC 2024x86_64      
//  Date of Generation : Sun Jun 01 22:28:25 PKT 2025                  
//                                                                     
//---------------------------------------------------------------------
/***********************************************************
***********************************************************
***********************************************************
   WARNING: THIS MODEL WILL BE PHASED OUT IN SUBSEQUENT RELEASE OF
   THIS COMPILER. INSTEAD, PLS. START USING THE VERILOG BEHAVIORAL MODEL
   WITH A COMMAND LINE ARGUMENT OF +define+VIRAGE_FAST_VERILOG.
   PLS. REFER TO RELEASE NOTES FOR MORE DETAILS 
***********************************************************
***********************************************************
*************************************************************/
//   --------------------------------------------------------------     
//                       Template Revision : 2.1.3                      
//   --------------------------------------------------------------     
//                      * Synchronous, 2-Port SRAM *                  
//                      * Verilog Behavioral Model *                  
//                THIS IS A SYNCHRONOUS 2-PORT MEMORY MODEL           
//                                                                    
//   Memory Name:tsmc_32k_dp                                          
//   Memory Size:8192 words x 32 bits                                 
//                                                                    
//                               PORT NAME                            
//                               ---------                            
//               Output Ports                                         
//                                   QA[31:0]                         
//                                   QB[31:0]                         
//               Input Ports:                                         
//                                   ADRA[12:0]                       
//                                   DA[31:0]                         
//                                   WEMA[31:0]                       
//                                   WEA                              
//                                   OEA                              
//                                   MEA                              
//                                   CLKA                             
//                                   RMA[3:0]                         
//                                   ADRB[12:0]                       
//                                   DB[31:0]                         
//                                   WEMB[31:0]                       
//                                   WEB                              
//                                   OEB                              
//                                   MEB                              
//                                   CLKB                             
//                                   RMB[3:0]                         

`resetall 
`timescale 1 ns / 1 ps 
`celldefine 
`ifdef verifault // for fault simulation purpose 
`suppress_faults 
`enable_portfaults 
`endif 

`define True    1'b1
`define False   1'b0

module tsmc_32k_dp ( QA, QB, ADRA, DA, WEMA, WEA, OEA, MEA, CLKA, RMA, ADRB, DB, WEMB, WEB, OEB, MEB, CLKB, RMB);

output  [31:0] QA;
output  [31:0] QB;
input  [12:0] ADRA;
input  [31:0] DA;
input  [31:0] WEMA;
input WEA;
input OEA;
input MEA;
input CLKA;
input  [3:0] RMA;
input  [12:0] ADRB;
input  [31:0] DB;
input  [31:0] WEMB;
input WEB;
input OEB;
input MEB;
input CLKB;
input  [3:0] RMB;


// Local registers, wires, etc
reg flag_ignore_read_addx;
wire [31:0] WEMA_buf;
assign WEMA_buf =   {  WEMA } ;
wire WEA_buf;
assign WEA_buf =   WEA ;
wire OEA_buf;
assign OEA_buf =   OEA ;
wire MEA_buf;
assign MEA_buf =   MEA ;
wire [31:0] WEMB_buf;
assign WEMB_buf =   {  WEMB } ;
wire WEB_buf;
assign WEB_buf =   WEB ;
wire OEB_buf;
assign OEB_buf =   OEB ;
wire MEB_buf;
assign MEB_buf =   MEB ;

initial
  begin
    `ifdef  virage_ignore_read_addx
       flag_ignore_read_addx = 0;
    `else
       flag_ignore_read_addx = 1;
    `endif
  end

generic_tsmc_32k_dp u0 ( QA,QB,ADRA,DA,WEMA_buf,WEA_buf,OEA_buf,MEA_buf,CLKA,RMA,ADRB,DB,WEMB_buf,WEB_buf,OEB_buf,MEB_buf,CLKB,RMB, flag_ignore_read_addx );

endmodule
`endcelldefine 
`ifdef verifault 
`disable_portfaults 
`nosuppress_faults 
`endif 



module generic_tsmc_32k_dp ( QA, QB, ADRA, DA, WEMA, WEA, OEA, MEA, CLKA, RMA, ADRB, DB, WEMB, WEB, OEB, MEB, CLKB, RMB, flag_ignore_read_addx);
parameter  words = 8192, bits = 32, addrbits = 13, timingmode = 1,rmbits = 4,wembits = 32;

output [bits-1:0] QA;
output [bits-1:0] QB;
input [addrbits-1:0] ADRA;
input [bits-1:0] DA;
input [wembits-1:0] WEMA;
input WEA;
input OEA;
input MEA;
input CLKA;
input [rmbits-1:0] RMA;
input [addrbits-1:0] ADRB;
input [bits-1:0] DB;
input [wembits-1:0] WEMB;
input WEB;
input OEB;
input MEB;
input CLKB;
input [rmbits-1:0] RMB;

input flag_ignore_read_addx;

parameter DataX = { bits { 1'bx } };
parameter DataZ = { bits { 1'bz } };
`ifdef MEM_CHECK_OFF
parameter MES_ALL = "OFF";
`else
parameter MES_ALL = "ON";
`endif

reg [bits-1:0] QAI;
reg [bits-1:0] QBI;
reg CLKA_old;
reg CLKB_old;
reg [addrbits-1:0] ADRA_tmp;

reg [bits-1:0] DA_tmp;

reg [wembits-1:0] WEMA_tmp;

reg WEA_tmp;
reg MEA_tmp;
reg [rmbits-1:0] RMA_tmp;

reg WEA_old;
reg WEA_lat;
reg [addrbits-1:0] ADRA_old;

reg [addrbits-1:0] ADRA_lat;

reg [bits-1:0] DA_old;

reg [bits-1:0] DA_lat;

reg [wembits-1:0] WEMA_old;

reg [wembits-1:0] WEMA_lat;

reg MEA_old;
reg MEA_lat;
reg [addrbits-1:0] ADRB_tmp;

reg [bits-1:0] DB_tmp;

reg [wembits-1:0] WEMB_tmp;

reg WEB_tmp;
reg MEB_tmp;
reg [rmbits-1:0] RMB_tmp;

reg WEB_old;
reg WEB_lat;
reg [addrbits-1:0] ADRB_old;

reg [addrbits-1:0] ADRB_lat;

reg [bits-1:0] DB_old;

reg [bits-1:0] DB_lat;

reg [wembits-1:0] WEMB_old;

reg [wembits-1:0] WEMB_lat;

reg MEB_old;
reg MEB_lat;
reg [bits-1:0] QA;
reg [bits-1:0] QAI_subword;
reg [bits-1:0] WEMA_all;
wire [bits-1:0] WEMA_all_old;
integer WEMA_cnt;
real CLKA_TIME;
reg [bits-1:0] QB;
reg [bits-1:0] QBI_subword;
reg [bits-1:0] WEMB_all;
wire [bits-1:0] WEMB_all_old;
integer WEMB_cnt;
real CLKB_TIME;
integer i,j;
real OUT_risetime;
reg [bits-1:0] mem_core_array [0:words -1];
reg [bits-1:0] memb_tmp;

reg mes_flag;

initial
  mes_flag = 0;



assign WEMA_all_old = {  WEMA_old };
assign WEMB_all_old = {  WEMB_old };

//====< Aport >====
//-- Aport Data Output
always @ (OEA or QAI) begin
                if(OEA) begin
                    QA <= QAI;
                end
                else if( !OEA ) begin
                   QA <=  DataZ;
                end
                else if( OEA===1'bx ) begin
                         if( MES_ALL=="ON" && CLKA===1'b1 && OUT_risetime !=$realtime && $realtime != 0 && mes_flag == 1'b1 ) begin
                                 $display("<<OEA unknown>>");
                                 $display("      time=%t; instance=%m (RAMS1H)",$realtime);
                         end
                       QA <=   DataX;
                end
        OUT_risetime <= $realtime;
end

always @ (OEB or QBI) begin
                if(OEB) begin
                    QB <= QBI;
                end
                else if( !OEB ) begin
                   QB <=  DataZ;
                end
                else if( OEB===1'bx ) begin
                         if( MES_ALL=="ON" && CLKB===1'b1 && OUT_risetime !=$realtime && $realtime != 0 && mes_flag == 1'b1 ) begin
                                 $display("<<OEB unknown>>");
                                 $display("      time=%t; instance=%m (RAMS1H)",$realtime);
                         end
                       QB <=   DataX;
                end
        OUT_risetime <= $realtime;
end


always @( negedge CLKA or WEA )
   begin
       if ( CLKA == 1'b0 )
       WEA_old = WEA;
   end
always @( negedge CLKA or ADRA )
   begin
       if ( CLKA == 1'b0 )
       ADRA_old = ADRA;
   end
always @( negedge CLKA or DA )
   begin
       if ( CLKA == 1'b0 )
       DA_old = DA;
   end
always @( negedge CLKA or WEMA )
   begin
       if ( CLKA == 1'b0 )
       WEMA_old = WEMA;
   end
always @( negedge CLKA or MEA )
   begin
       if ( CLKA == 1'b0 )
       MEA_old = MEA;
   end
//-- Internal Data Set
always @( posedge CLKA ) begin
       WEA_lat = WEA_old;
       ADRA_lat = ADRA_old;
       DA_lat = DA_old;
       WEMA_lat = WEMA_old;
       WEMA_all = WEMA_all_old;
       MEA_lat = MEA_old;
        CLKA_old <= CLKA;
        CLKA_TIME = $realtime;
        if( CLKA===1'bx ) begin //CLKA="0->X"
             if( MES_ALL=="ON" && mes_flag == 1'b1 ) begin
                 $display("<<CLKA unknown>>");
                 $display("      time=%t; instance=%m (RAMS1H)",$realtime);
             end
             for ( i=0; i<words ; i=i+1 ) begin
                 mem_core_array[i] <= DataX;
             end
             QAI <=  DataX;
        end
        else if( CLKA_old===1'bx && CLKA===1'b1 ) begin
             QAI <=  DataX;
        end
//---- Normal Mode
        else begin
                if( MEA_lat===1'bx ) begin
                        if( MES_ALL=="ON" && mes_flag == 1'b1 ) begin
                                $display("<<MEA unknown>>");
                                $display("      time=%t; instance=%m (RAMS1H)",$realtime);
                            
                        end
//                        if( WEA_lat!==0 ) begin
                                if( ^ADRA_lat===1'bx ) begin                      //Memory Break(All)
                                        if( MES_ALL=="ON" && mes_flag == 1'b1 ) begin
                                                 $display("<<ADRA unknown , memory broken>>") ;
                                                 $display("      time=%t; instance=%m (RAMS1H)",$realtime);
                                             
                                        end
                                        for ( i=0; i<words ; i=i+1 ) begin
                                                mem_core_array[i] <= DataX;
                                        end
                                end
                                else if( !( ADRA_lat >= words ) ) begin
                                  if ( !(WEA_lat == 1'b0 && flag_ignore_read_addx == 0) )
     			          begin //flag_ignore_read_addx
                                        if( MES_ALL=="ON" && mes_flag == 1'b1 ) begin
                                                $display("<<ADRA Fix, But memory broken>>") ;
                                                $display("      time=%t; instance=%m (RAMS1H)",$realtime);
                                        end
                                        for ( i=0; i<words ; i=i+1 ) begin
                                                mem_core_array[i] <= DataX;
                                        end
     			          end //flag_ignore_read_addx
                                end
//                        end
                        QAI <=  DataX;
                end
//---- CLEAR none, MEA_lat=1
                else if( MEA_lat ) begin
                        if( !WEA_lat ) begin


                                if (RMA != 4'b1000)
                                begin
                                  if( MES_ALL=="ON" && mes_flag == 1'b1 )
                                  begin
                                    $display("RMA = %b is not recommended value\n",RMA);
                                    $display("      time=%t; instance=%m (RAMS1H)",$realtime);
                                  end
                                end

                                if( ^RMA ===1'bx ) 
                                     QAI <=  DataX;
                                else if(^ADRA_lat===1'bx ) begin                          //Memory Break(All)
                                         if( MES_ALL=="ON" && mes_flag == 1'b1 ) begin
                                                $display("<<ADRA unknown>>") ;
                                                $display("      time=%t; instance=%m (RAMS1H)",$realtime);
                                             
                                         end
                                     if (flag_ignore_read_addx)
     				       begin //flag_ignore_read_addx
                                           for ( i=0; i<words ; i=i+1 ) begin
                                                mem_core_array[i] <= DataX;
                                           end
			               end   //flag_ignore_read_addx
                                                QAI <=  DataX;
                                end
                                else if( ADRA_lat >= words ) begin
                                        if( MES_ALL=="ON" && mes_flag == 1'b1 ) begin
                                                $display("<<No memory cell at Address=%b ( %d )>>",ADRA,ADRA);
                                                $display("      time=%t; instance=%m (RAMS1H)",$realtime);
                                        end
                                                QAI <=  DataX;
                                end
                                else begin
                                                QAI <=  mem_core_array[ADRA_lat];
                                                if (mes_flag == 0) mes_flag = 1;
                                end    //ADRA_lat switch
                        end                                                     //WEA_lat switch
//---- WriteMode
                        else if( WEA_lat ) begin
                                if(^ADRA_lat===1'bx ) begin
                                         if( MES_ALL=="ON" && mes_flag == 1'b1 ) begin
                                                $display("<<ADRA unknown >>") ;
                                                $display("      time=%t; instance=%m (RAMS1H)",$realtime);
                                            
                                         end
                                        WEMA_cnt = 0 ;
                                        for ( i=0; i < wembits ; i=i+1 ) begin    //Count WEMA
                                                if( WEMA_lat[i]==1'b1 ) begin
                                                        WEMA_cnt = WEMA_cnt + 1 ;
                                                end
                                        end
                                        if( WEMA_cnt!=0 ) begin                  //Memory Break(WEMA Bit)
                                                if( MES_ALL=="ON" && mes_flag == 1'b1 ) 
                                                   $display("<< memory broken>>") ;
                                                for ( i=0; i<words ; i=i+1 ) begin
                                                        mem_core_array[i] <= DataX;
                                                end
                                        end
                                                QAI <=  DA_lat;
                                end
                                else if( ADRA_lat >= words ) begin
                                        if( MES_ALL=="ON" && mes_flag == 1'b1 ) begin
                                                $display("<<No memory cell at Address=%b ( %d )>>",ADRA,ADRA);
                                                $display("      time=%t; instance=%m (RAMS1H)",$realtime);
                                        end
                                                QAI <=  DA_lat;
                                end
                                else begin
                                if(^DA_lat===1'bx ) begin
                                         if( MES_ALL=="ON" && mes_flag == 1'b1 ) begin
                                                $display("<<DA unknown >>") ;
                                                $display("      time=%t; instance=%m (RAMS1H)",$realtime);
                                            
                                         end
                                end
                                        WEMA_cnt = 0 ;
                                        for ( i=0; i < wembits ; i=i+1 ) begin    //Count WEMA("X")
                                                if( WEMA_lat[i]===1'bx ) begin
                                                        WEMA_cnt = WEMA_cnt + 1 ;
                                                end
                                        end
                                        if( !WEMA_cnt ) begin                    //NormalWrite
                                                mem_core_array[ADRA_lat] <= ( mem_core_array[ADRA_lat] & ~WEMA_all ) | ( DA_lat & WEMA_all );
                                                        QAI_subword = QAI;
                                                        QAI <=  ( QAI_subword & ~WEMA_all ) | ( DA_lat & WEMA_all );
                                        end
                                        else if( WEMA_cnt!=0 ) begin             //Memory Break
                                                if( MES_ALL=="ON" && mes_flag == 1'b1 ) begin
                                                        $display("<<WEMA unknown>>");
                                                        $display("      time=%t; instance=%m (RAMS1H)",$realtime);
                                            
                                                end
                                                mem_core_array[ADRA_lat] <= DataX;
                                                        QAI <=  DataX;
                                        end
                                                        if (mes_flag == 0) mes_flag = 1;

                                end                                             //ADRA_lat switch
                        end                                                     //WEA_lat switch
                        else if( WEA_lat===1'bx ) begin
                                if( MES_ALL=="ON" && mes_flag == 1'b1 ) begin
                                       $display("<<WEA unknown>>");
                                       $display("      time=%t; instance=%m (RAMS1H)",$realtime);
                                            
                                end
                                if( ^ADRA_lat===1'bx ) begin                         //Memory Break(All)
                                        if( MES_ALL=="ON" && mes_flag == 1'b1 ) begin
                                                $display("<<ADRA unknown >>") ;
                                                $display("      time=%t; instance=%m (RAMS1H)",$realtime);
                                            
                                        end
                                        WEMA_cnt = 0 ;
                                        for ( i=0; i < wembits ; i=i+1 ) begin    //Count WEMA
                                                if( WEMA_lat[i]==1'b1 ) begin
                                                        WEMA_cnt = WEMA_cnt + 1 ;
                                                end
                                        end
                                        if( WEMA_cnt!=0 ) begin                  //Memory Break(WEMA Bit)
                                                if( MES_ALL=="ON" && mes_flag == 1'b1 ) 
                                                   $display("<< memory broken>>") ;
                                                for ( i=0; i<words ; i=i+1 ) begin
                                                        mem_core_array[i] <= DataX;
                                                end
                                        end
                                                QAI <=  DataX;
                                end
                                else if( ADRA_lat >= words ) begin
                                        if( MES_ALL=="ON" && mes_flag == 1'b1 ) begin
                                                $display("<<No memory cell at Address=%b ( %d )>>",ADRA,ADRA);
                                                $display("      time=%t; instance=%m (RAMS1H)",$realtime);
                                        end
                                                QAI <=  DataX;
                                end
                                else begin
                                        mem_core_array[ADRA_lat] <= DataX;
                                                QAI <=  DataX;
                                end //ADRA_lat switch
                        end  //WEA_lat switch
                end

//-- Simultaneus

        if(CLKA_TIME==CLKB_TIME) begin
                        if( ( ADRA_lat===ADRB_lat) && ((MEA_lat && MEB_lat) 
                        || ( WEA_lat && WEB_lat && (( MEA_lat===1'bx && MEB_lat ) || ( MEA_lat && MEB_lat===1'bx ))))) begin
                                if( WEA_lat!==1'b0 && WEB_lat!==1'b0 )begin
                                        if( MES_ALL=="ON" && mes_flag == 1'b1 ) begin
                                                $display("<<Simultaneous access to the same address on B-port(WRITE) and A-port(WRITE), so broken memory content>>");
                                                $display("      time=%t; instance=%m (RAMS1H)",$realtime);
                                        end
                                       memb_tmp  = (mem_core_array[ADRA_lat] & ~WEMA_all) | ( DA_lat & WEMA_all);
                                       #0 mem_core_array[ADRA_lat] <= ((memb_tmp & ~WEMB_all) | ( DB_lat & WEMB_all)) ^ (WEMB_all & WEMA_all & DataX);
                                end
                                else if( WEA_lat!==1'b0 ) begin
                                     if( ( MEB_lat && WEB_lat!=1'b1)  ) begin
                                        if( MES_ALL=="ON" && mes_flag == 1'b1 ) begin
                                                $display("<<Simultaneous access to the same address on B-port(READ) and A-port(WRITE)>>");
                                                $display("      time=%t; instance=%m (RAMS1H)",$realtime);
                                        end
                                       #0 QBI <=  mem_core_array[ADRA_lat] ^ ( WEMA_all & DataX);
                                     end
                                end
                                else if( WEB_lat!==1'b0 ) begin
                                      if( ( MEA_lat && WEA_lat!=1'b1)  ) begin
                                        if( MES_ALL=="ON" && mes_flag == 1'b1 ) begin
                                                $display("<<Simultaneous access to the same address on B-port(WRITE) and A-port(READ)>>");
                                                $display("      time=%t; instance=%m (RAMS1H)",$realtime);
                                        end
                                       #0 QAI <=  mem_core_array[ADRA_lat] ^ ( WEMB_all & DataX);
                                      end
                                end
                        end
        end
        end
end
//---- Clock Negative Edge 
always @( negedge CLKA) begin
   CLKA_old <= CLKA;
   if ( CLKA_old ===1'b1 && CLKA===1'bx) begin
      if( MES_ALL=="ON" && mes_flag == 1'b1 ) begin 
        $display("<<CLKA unknown>>");
        $display("      time=%t; instance=%m (RAMS1H)",$realtime);
      end 
      for ( i=0; i<words ; i=i+1 ) begin     //Memory Broken
          mem_core_array[i] <= DataX;
      end
      QAI <=  DataX;
   end
end

always @( negedge CLKB or WEB )
   begin
       if ( CLKB == 1'b0 )
       WEB_old = WEB;
   end
always @( negedge CLKB or ADRB )
   begin
       if ( CLKB == 1'b0 )
       ADRB_old = ADRB;
   end
always @( negedge CLKB or DB )
   begin
       if ( CLKB == 1'b0 )
       DB_old = DB;
   end
always @( negedge CLKB or WEMB )
   begin
       if ( CLKB == 1'b0 )
       WEMB_old = WEMB;
   end
always @( negedge CLKB or MEB )
   begin
       if ( CLKB == 1'b0 )
       MEB_old = MEB;
   end
//-- Internal Data Set
always @( posedge CLKB ) begin
       WEB_lat = WEB_old;
       ADRB_lat = ADRB_old;
       DB_lat = DB_old;
       WEMB_lat = WEMB_old;
       WEMB_all = WEMB_all_old;
       MEB_lat = MEB_old;
        CLKB_old <= CLKB;
        CLKB_TIME = $realtime;
        if( CLKB===1'bx ) begin //CLKB="0->X"
             if( MES_ALL=="ON" && mes_flag == 1'b1 ) begin
                 $display("<<CLKB unknown>>");
                 $display("      time=%t; instance=%m (RAMS1H)",$realtime);
             end
             for ( i=0; i<words ; i=i+1 ) begin
                 mem_core_array[i] <= DataX;
             end
             QBI <=  DataX;
        end
        else if( CLKB_old===1'bx && CLKB===1'b1 ) begin
             QBI <=  DataX;
        end
//---- Normal Mode
        else begin
                if( MEB_lat===1'bx ) begin
                        if( MES_ALL=="ON" && mes_flag == 1'b1 ) begin
                                $display("<<MEB unknown>>");
                                $display("      time=%t; instance=%m (RAMS1H)",$realtime);
                            
                        end
//                        if( WEB_lat!==0 ) begin
                                if( ^ADRB_lat===1'bx ) begin                      //Memory Break(All)
                                        if( MES_ALL=="ON" && mes_flag == 1'b1 ) begin
                                                 $display("<<ADRB unknown , memory broken>>") ;
                                                 $display("      time=%t; instance=%m (RAMS1H)",$realtime);
                                             
                                        end
                                        for ( i=0; i<words ; i=i+1 ) begin
                                                mem_core_array[i] <= DataX;
                                        end
                                end
                                else if( !( ADRB_lat >= words ) ) begin
                                  if ( !(WEB_lat == 1'b0 && flag_ignore_read_addx == 0) )
     			          begin //flag_ignore_read_addx
                                        if( MES_ALL=="ON" && mes_flag == 1'b1 ) begin
                                                $display("<<ADRB Fix, But memory broken>>") ;
                                                $display("      time=%t; instance=%m (RAMS1H)",$realtime);
                                        end
                                        for ( i=0; i<words ; i=i+1 ) begin
                                                mem_core_array[i] <= DataX;
                                        end
     			          end //flag_ignore_read_addx
                                end
//                        end
                        QBI <=  DataX;
                end
//---- CLEAR none, MEB_lat=1
                else if( MEB_lat ) begin
                        if( !WEB_lat ) begin


                                if (RMB != 4'b1000)
                                begin
                                  if( MES_ALL=="ON" && mes_flag == 1'b1 )
                                  begin
                                    $display("RMB = %b is not recommended value\n",RMB);
                                    $display("      time=%t; instance=%m (RAMS1H)",$realtime);
                                  end
                                end

                                if( ^RMB ===1'bx ) 
                                     QBI <=  DataX;
                                else if(^ADRB_lat===1'bx ) begin                          //Memory Break(All)
                                         if( MES_ALL=="ON" && mes_flag == 1'b1 ) begin
                                                $display("<<ADRB unknown>>") ;
                                                $display("      time=%t; instance=%m (RAMS1H)",$realtime);
                                             
                                         end
                                     if (flag_ignore_read_addx)
     				       begin //flag_ignore_read_addx
                                           for ( i=0; i<words ; i=i+1 ) begin
                                                mem_core_array[i] <= DataX;
                                           end
			               end   //flag_ignore_read_addx
                                                QBI <=  DataX;
                                end
                                else if( ADRB_lat >= words ) begin
                                        if( MES_ALL=="ON" && mes_flag == 1'b1 ) begin
                                                $display("<<No memory cell at Address=%b ( %d )>>",ADRB,ADRB);
                                                $display("      time=%t; instance=%m (RAMS1H)",$realtime);
                                        end
                                                QBI <=  DataX;
                                end
                                else begin
                                                QBI <=  mem_core_array[ADRB_lat];
                                                if (mes_flag == 0) mes_flag = 1;
                                end    //ADRB_lat switch
                        end                                                     //WEB_lat switch
//---- WriteMode
                        else if( WEB_lat ) begin
                                if(^ADRB_lat===1'bx ) begin
                                         if( MES_ALL=="ON" && mes_flag == 1'b1 ) begin
                                                $display("<<ADRB unknown >>") ;
                                                $display("      time=%t; instance=%m (RAMS1H)",$realtime);
                                            
                                         end
                                        WEMB_cnt = 0 ;
                                        for ( i=0; i < wembits ; i=i+1 ) begin    //Count WEMB
                                                if( WEMB_lat[i]==1'b1 ) begin
                                                        WEMB_cnt = WEMB_cnt + 1 ;
                                                end
                                        end
                                        if( WEMB_cnt!=0 ) begin                  //Memory Break(WEMB Bit)
                                                if( MES_ALL=="ON" && mes_flag == 1'b1 ) 
                                                   $display("<< memory broken>>") ;
                                                for ( i=0; i<words ; i=i+1 ) begin
                                                        mem_core_array[i] <= DataX;
                                                end
                                        end
                                                QBI <=  DB_lat;
                                end
                                else if( ADRB_lat >= words ) begin
                                        if( MES_ALL=="ON" && mes_flag == 1'b1 ) begin
                                                $display("<<No memory cell at Address=%b ( %d )>>",ADRB,ADRB);
                                                $display("      time=%t; instance=%m (RAMS1H)",$realtime);
                                        end
                                                QBI <=  DB_lat;
                                end
                                else begin
                                if(^DB_lat===1'bx ) begin
                                         if( MES_ALL=="ON" && mes_flag == 1'b1 ) begin
                                                $display("<<DB unknown >>") ;
                                                $display("      time=%t; instance=%m (RAMS1H)",$realtime);
                                            
                                         end
                                end
                                        WEMB_cnt = 0 ;
                                        for ( i=0; i < wembits ; i=i+1 ) begin    //Count WEMB("X")
                                                if( WEMB_lat[i]===1'bx ) begin
                                                        WEMB_cnt = WEMB_cnt + 1 ;
                                                end
                                        end
                                        if( !WEMB_cnt ) begin                    //NormalWrite
                                                mem_core_array[ADRB_lat] <= ( mem_core_array[ADRB_lat] & ~WEMB_all ) | ( DB_lat & WEMB_all );
                                                        QBI_subword = QBI;
                                                        QBI <=  ( QBI_subword & ~WEMB_all ) | ( DB_lat & WEMB_all );
                                        end
                                        else if( WEMB_cnt!=0 ) begin             //Memory Break
                                                if( MES_ALL=="ON" && mes_flag == 1'b1 ) begin
                                                        $display("<<WEMB unknown>>");
                                                        $display("      time=%t; instance=%m (RAMS1H)",$realtime);
                                            
                                                end
                                                mem_core_array[ADRB_lat] <= DataX;
                                                        QBI <=  DataX;
                                        end
                                                        if (mes_flag == 0) mes_flag = 1;

                                end                                             //ADRB_lat switch
                        end                                                     //WEB_lat switch
                        else if( WEB_lat===1'bx ) begin
                                if( MES_ALL=="ON" && mes_flag == 1'b1 ) begin
                                       $display("<<WEB unknown>>");
                                       $display("      time=%t; instance=%m (RAMS1H)",$realtime);
                                            
                                end
                                if( ^ADRB_lat===1'bx ) begin                         //Memory Break(All)
                                        if( MES_ALL=="ON" && mes_flag == 1'b1 ) begin
                                                $display("<<ADRB unknown >>") ;
                                                $display("      time=%t; instance=%m (RAMS1H)",$realtime);
                                            
                                        end
                                        WEMB_cnt = 0 ;
                                        for ( i=0; i < wembits ; i=i+1 ) begin    //Count WEMB
                                                if( WEMB_lat[i]==1'b1 ) begin
                                                        WEMB_cnt = WEMB_cnt + 1 ;
                                                end
                                        end
                                        if( WEMB_cnt!=0 ) begin                  //Memory Break(WEMB Bit)
                                                if( MES_ALL=="ON" && mes_flag == 1'b1 ) 
                                                   $display("<< memory broken>>") ;
                                                for ( i=0; i<words ; i=i+1 ) begin
                                                        mem_core_array[i] <= DataX;
                                                end
                                        end
                                                QBI <=  DataX;
                                end
                                else if( ADRB_lat >= words ) begin
                                        if( MES_ALL=="ON" && mes_flag == 1'b1 ) begin
                                                $display("<<No memory cell at Address=%b ( %d )>>",ADRB,ADRB);
                                                $display("      time=%t; instance=%m (RAMS1H)",$realtime);
                                        end
                                                QBI <=  DataX;
                                end
                                else begin
                                        mem_core_array[ADRB_lat] <= DataX;
                                                QBI <=  DataX;
                                end //ADRB_lat switch
                        end  //WEB_lat switch
                end

//-- Simultaneus

        if(CLKB_TIME==CLKA_TIME) begin
                        if( ( ADRB_lat===ADRA_lat) && ((MEB_lat && MEA_lat) 
                        || ( WEB_lat && WEA_lat && (( MEB_lat===1'bx && MEA_lat ) || ( MEB_lat && MEA_lat===1'bx ))))) begin
                                if( WEB_lat!==1'b0 && WEA_lat!==1'b0 )begin
                                        if( MES_ALL=="ON" && mes_flag == 1'b1 ) begin
                                                $display("<<Simultaneous access to the same address on A-port(WRITE) and B-port(WRITE), so broken memory content>>");
                                                $display("      time=%t; instance=%m (RAMS1H)",$realtime);
                                        end
                                       memb_tmp  = (mem_core_array[ADRB_lat] & ~WEMB_all) | ( DB_lat & WEMB_all);
                                       #0 mem_core_array[ADRB_lat] <= ((memb_tmp & ~WEMA_all) | ( DA_lat & WEMA_all)) ^ (WEMA_all & WEMB_all & DataX);
                                end
                                else if( WEB_lat!==1'b0 ) begin
                                     if( ( MEA_lat && WEA_lat!=1'b1)  ) begin
                                        if( MES_ALL=="ON" && mes_flag == 1'b1 ) begin
                                                $display("<<Simultaneous access to the same address on A-port(READ) and B-port(WRITE)>>");
                                                $display("      time=%t; instance=%m (RAMS1H)",$realtime);
                                        end
                                       #0 QAI <=  mem_core_array[ADRB_lat] ^ ( WEMB_all & DataX);
                                     end
                                end
                                else if( WEA_lat!==1'b0 ) begin
                                      if( ( MEB_lat && WEB_lat!=1'b1)  ) begin
                                        if( MES_ALL=="ON" && mes_flag == 1'b1 ) begin
                                                $display("<<Simultaneous access to the same address on A-port(WRITE) and B-port(READ)>>");
                                                $display("      time=%t; instance=%m (RAMS1H)",$realtime);
                                        end
                                       #0 QBI <=  mem_core_array[ADRB_lat] ^ ( WEMA_all & DataX);
                                      end
                                end
                        end
        end
        end
end
//---- Clock Negative Edge 
always @( negedge CLKB) begin
   CLKB_old <= CLKB;
   if ( CLKB_old ===1'b1 && CLKB===1'bx) begin
      if( MES_ALL=="ON" && mes_flag == 1'b1 ) begin 
        $display("<<CLKB unknown>>");
        $display("      time=%t; instance=%m (RAMS1H)",$realtime);
      end 
      for ( i=0; i<words ; i=i+1 ) begin     //Memory Broken
          mem_core_array[i] <= DataX;
      end
      QBI <=  DataX;
   end
end

endmodule